on: push

jobs:

  code-format-c-cpp:
    runs-on: ubuntu-latest
    container: ubuntu:focal
    steps:
      - name: Install required packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt-get update
          apt-get install -y --no-install-recommends ca-certificates git clang-format
          apt-get clean
          rm -rf /var/lib/apt/lists/*
          clang-format --version
      - uses: actions/checkout@v2
      - name: Run clang-format
        run: |
          git ls-files '*.cpp' '*.h' '*.hpp' | xargs clang-format --verbose -i
          git diff --exit-code

  code-format-py:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install autopep8
        run: |
          pip3 install autopep8
          autopep8 --version
      - name: Run autopep8
        run: git ls-files '*.py' | xargs autopep8 --diff --exit-code

  run-tests:
    runs-on: ubuntu-latest
    container: debian:bullseye-slim
    steps:
      - uses: actions/checkout@v2
      - name: Install required packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt-get update
          apt-get install -y --no-install-recommends build-essential clang pkg-config cmake libblas-dev libopenblas-dev libatlas-base-dev libfftw3-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Build tests
        run: |
          cmake -B build/ -D CMAKE_CXX_COMPILER=clang++ -D BUILD_TESTING=TRUE -D NO_QMKL6=TRUE
          cmake --build build/ -v
      - name: Run tests
        run: |
          tail -n +1 /proc/cpuinfo /proc/meminfo
          echo
          cd build/
          ctest -V

  run-tests-mkl:
    runs-on: ubuntu-latest
    container: ubuntu:focal
    defaults:
      run:
        shell: bash
    steps:
      - name: Install required packages
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          apt-get update
          apt-get install -y --no-install-recommends ca-certificates curl gnupg make cmake binutils libstdc++-9-dev
          curl --silent 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB' | apt-key add -
          echo 'deb https://apt.repos.intel.com/oneapi all main' >>/etc/apt/sources.list.d/intel.list
          apt-get update
          apt-get install -y --no-install-recommends intel-oneapi-compiler-dpcpp-cpp intel-oneapi-mkl-devel
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - uses: actions/checkout@v2
      - name: Build tests
        run: |
          source /opt/intel/oneapi/setvars.sh
          cmake -B build/ -D CMAKE_CXX_COMPILER=icpx -D mkl_FOUND=TRUE -D BUILD_TESTING=TRUE -D NO_QMKL6=TRUE
          cmake --build build/ -v
      - name: Run tests
        run: |
          tail -n +1 /proc/cpuinfo /proc/meminfo
          echo
          source /opt/intel/oneapi/setvars.sh
          cd build/
          ctest -V

  build-package:
    runs-on: ubuntu-latest
    container: debian:bullseye-slim
    env:
      libdrm_v3d_version: 0.0.0
      qmkl6_version: 0.0.0
    strategy:
      matrix:
        include:
          - arch: armhf
            triplet: arm-linux-gnueabihf
            cflags: -mcpu=cortex-a72 -mtune=cortex-a72 -mfloat-abi=hard -mfpu=neon-vfpv4
          - arch: arm64
            triplet: aarch64-linux-gnu
            cflags: -mcpu=cortex-a72 -mtune=cortex-a72
    steps:
      - name: Install cross toolchain
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          dpkg --add-architecture '${{ matrix.arch }}'
          apt-get update
          apt-get install -y --no-install-recommends ca-certificates curl git pkg-config cmake 'crossbuild-essential-${{ matrix.arch }}' python3-pip python3-numpy
          apt-get clean
          rm -rf /var/lib/apt/lists/*
      - name: Download and unpack required packages
        run: |
          curl -sL 'https://github.com/Idein/libdrm_v3d/releases/download/v${{ env.libdrm_v3d_version }}/libdrm_v3d_${{ env.libdrm_v3d_version }}_${{ matrix.arch }}.deb' | dpkg-deb -x - /
          python3 -m pip install --user git+https://github.com/Idein/py-videocore6.git
      - uses: actions/checkout@v2
      - name: Build package
        run: |
          PKG_CONFIG_PATH='/usr/lib/${{ matrix.triplet }}/pkgconfig/' cmake -B build/ -D BUILD_TESTING=FALSE -D CPACK_DEBIAN_PACKAGE_ARCHITECTURE='${{ matrix.arch }}' -D CMAKE_CXX_COMPILER='${{ matrix.triplet }}-g++' -D CMAKE_CXX_FLAGS='${{ matrix.cflags }}'
          cmake --build build/ -t package -v
      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: qmkl6-${{ env.qmkl6_version }}-${{ matrix.arch }}
          path: build/qmkl6_${{ env.qmkl6_version }}_${{ matrix.arch }}.deb
          if-no-files-found: error
